diff --git a/GalaxyBudsClient/Interface/Pages/SystemPage.axaml.cs b/GalaxyBudsClient/Interface/Pages/SystemPage.axaml.cs
index 4dc0b573..1d202be2 100644
--- a/GalaxyBudsClient/Interface/Pages/SystemPage.axaml.cs
+++ b/GalaxyBudsClient/Interface/Pages/SystemPage.axaml.cs
@@ -13,13 +13,18 @@ using GalaxyBudsClient.Interface.ViewModels.Pages;
 using GalaxyBudsClient.Message;
 using GalaxyBudsClient.Platform;
 using GalaxyBudsClient.Utils.Extensions;
+using System;
+using System.IO;
+using System.Net;
+
+
 
 namespace GalaxyBudsClient.Interface.Pages;
 
 public partial class SystemPage : BasePage<SystemPageViewModel>
 {
     private readonly string[] _restrictedItems = ["Firmware", "UsageReport"];
-    
+
     public SystemPage()
     {
         InitializeComponent();
@@ -30,12 +35,12 @@ public partial class SystemPage : BasePage<SystemPageViewModel>
     {
         if (e.Source is not SettingsExpanderItem item)
             return;
-        
+
         
         if (!_restrictedItems.Contains(item.Name) ||
             await Utils.Interface.Dialogs.RequireFullVersion())
         {
-            NavigationService.Instance.Navigate(item.Name);
+        NavigationService.Instance.Navigate(item.Name);
         }
     }
 
@@ -62,11 +67,11 @@ public partial class SystemPage : BasePage<SystemPageViewModel>
         sender.Title = Strings.SystemWaitingForDevice;
         sender.IsPrimaryButtonEnabled = false;
         sender.IsSecondaryButtonEnabled = false;
-        
+
         var defer = args.GetDeferral();
         SppMessageReceiver.Instance.ResetResponse += OnResetResponse;
         await BluetoothImpl.Instance.SendRequestAsync(MsgIds.RESET);
-        
+
         // Wait for 10 seconds for the reset response
         try
         {
@@ -78,16 +83,16 @@ public partial class SystemPage : BasePage<SystemPageViewModel>
         // If the reset response was not received, show an error message
         OnResetResponse(null, -1);
         return;
-        
+
         void OnResetResponse(object? s, int code)
         {
             cancelToken.Cancel();
             defer.Complete();
-            
+
             if (code != 0)
             {
                 var info = code == -1 ? Strings.SystemNoResponse : code.ToString();
-                
+
                 _ = new MessageBox
                 {
                     Title = Strings.FactoryErrorTitle,
@@ -112,7 +117,7 @@ public partial class SystemPage : BasePage<SystemPageViewModel>
             Description = Strings.PairingmodeDone
         }.ShowAsync();
     }
-    
+
     private async void OnSelfTestClicked(object? sender, RoutedEventArgs e)
     {
         if (!await Utils.Interface.Dialogs.RequireFullVersion())
@@ -132,7 +137,7 @@ public partial class SystemPage : BasePage<SystemPageViewModel>
             TextWrapping = TextWrapping.Wrap,
             MaxWidth = 600
         };
-        
+
         var cd = new ContentDialog
         {
             Title = Strings.SpatialHeader,
@@ -143,20 +148,26 @@ public partial class SystemPage : BasePage<SystemPageViewModel>
         using var sensorManager = new SpatialSensorManager();
         sensorManager.NewQuaternionReceived += OnNewQuaternionReceived;
         sensorManager.Attach();
-        
+
         await cd.ShowAsync(TopLevel.GetTopLevel(MainView.Instance));
-        
+
         sensorManager.NewQuaternionReceived -= OnNewQuaternionReceived;
         sensorManager.Detach();
         return;
-        
+
         void OnNewQuaternionReceived(object? s, Quaternion quat)
         {
             var (roll, pitch, yaw) = quat.ToRollPitchYaw();
-            textBlock.Text = $"{Strings.SpatialDumpQuaternion}\n" +
-                             $"X={quat.X}\nY={quat.Y}\nZ={quat.Z}\nW={quat.W}\n\n" + 
-                             $"{Strings.SpatialDumpRpy}\n" +
-                             $"Roll={roll}\nPitch={pitch}\nYaw={yaw}\n";
+            string quaternionInfo = $"{Strings.SpatialDumpQuaternion}\n" +
+                                    $"X={quat.X}\nY={quat.Y}\nZ={quat.Z}\nW={quat.W}\n\n" +
+                                    $"{Strings.SpatialDumpRpy}\n" +
+                                    $"Roll={roll}\nPitch={pitch}\nYaw={yaw}\n";
+
+            // Update the textBlock.Text as before
+            textBlock.Text = quaternionInfo;
+
+            // Write the same information to stdout
+            Console.WriteLine(quaternionInfo);
         }
     }
 
@@ -171,10 +182,10 @@ public partial class SystemPage : BasePage<SystemPageViewModel>
             Description = Strings.CoredumpDlNote,
             ButtonText = Strings.ContinueButton
         }.ShowAsync();
-        
+
         if (!result)
             return;
-        
+
         await new TraceDownloaderDialog().BeginDownload();
     }
 }
\ No newline at end of file
